const WEBHOOK_URL = "https://discord.com/api/webhooks/1386516147515559977/wGn28dWXhbaV3j-3LdObAysSQ7mwjyjecEiSYRMS1DEYl2n3ne3YTGQupttISIHDl5pP";

function checkAndSendDelays() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const data = sheet.getDataRange().getValues();

  const now = Math.floor(Date.now() / 1000);
  let rowsToDelete = [];

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const jobId = row[0];
    const placeId = row[1];
    const delay = row[2];
    const sentAt = row[3]; // C·ªôt Sent At (epoch time)
    const boss = Boolean(row[4]);

    // Ch∆∞a ƒë·∫øn th·ªùi gian delay th√¨ b·ªè qua
    if (!delay || delay > now) continue;

    // N·∫øu ƒë√£ g·ª≠i v√† ƒë·ªß 15 ph√∫t (900 gi√¢y) th√¨ cho v√†o danh s√°ch x√≥a
    if (sentAt && now - sentAt >= 900) {
      rowsToDelete.push(i + 1);
      continue;
    }

    // N·∫øu ch∆∞a g·ª≠i (sentAt ch∆∞a c√≥)
    if (!sentAt) {
      let bossName = "Unknown";
      if (placeId == 9224601490) bossName = "Macro";
      else if (placeId == 12413901502) bossName = "Kaido";
      else if (placeId == 16190471004 && boss) bossName = "Katakuri";
      else if (placeId == 16190471004) bossName = "Big Mom";

      const payload = {
        embeds: [{
          title: "üëë KimSoi Hub Boss Notify (Boss Will Spawn In 6 Minute Later) üëë",
          color: 0x00ff00,
          fields: [
            {
              name: "Boss Name :",
              value: bossName,
              inline: true
            },
            {
              name: "Job Id :",
              value: jobId,
              inline: false
            },
            {
              name: "Script :",
              value: `game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, "${jobId}", game.Players.LocalPlayer)`,
              inline: false
            }
          ]
        }]
      };

      try {
        UrlFetchApp.fetch(WEBHOOK_URL, {
          method: "post",
          contentType: "application/json",
          payload: JSON.stringify(payload)
        });

        // Ghi th·ªùi gian ƒë√£ g·ª≠i v√†o c·ªôt th·ª© 4
        sheet.getRange(i + 1, 4).setValue(now);
      } catch (e) {
        Logger.log("Error sending webhook: " + e);
      }
    }
  }

  // X√≥a c√°c d√≤ng ƒë√£ g·ª≠i v√† qu√° 15 ph√∫t
  for (let i = rowsToDelete.length - 1; i >= 0; i--) {
    sheet.deleteRow(rowsToDelete[i]);
  }
}

function doGet(e) {
  const jobId = e.parameter.jobid;
  const placeId = parseInt(e.parameter.placeid);
  const delay = parseInt(e.parameter.delay);
  const boss = e.parameter.boss === 'true'; // true = Katakuri, false = Big Mom

  if (!jobId || isNaN(placeId) || isNaN(delay)) {
    return ContentService.createTextOutput("Missing or invalid parameters");
  }

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const data = sheet.getDataRange().getValues();

  let countSameJobId = 0;
  let existsExact = false;

  for (let i = 1; i < data.length; i++) {
    const rowJobId = data[i][0];
    const rowPlaceId = parseInt(data[i][1]);
    const rowBoss = data[i][3] === true || data[i][3] === "true";

    if (placeId === 16190471004) {
      // ƒê·∫øm s·ªë l·∫ßn jobId xu·∫•t hi·ªán t·∫°i placeId n√†y
      if (rowPlaceId === 16190471004 && rowJobId === jobId) {
        countSameJobId++;

        if (rowBoss === boss) {
          existsExact = true; // Tr√πng c·∫£ jobId v√† boss
        }
      }
    } else {
      // V·ªõi c√°c place kh√°c, ch·ªâ c·∫ßn tr√πng jobId l√† kh√¥ng cho
      if (rowJobId === jobId) {
        return ContentService.createTextOutput("‚ùå jobId already exists (non-boss map)");
      }
    }
  }

  // V·ªõi Katakuri/Big Mom
  if (placeId === 16190471004) {
    if (existsExact) {
      return ContentService.createTextOutput("‚ùå jobId v·ªõi boss n√†y ƒë√£ t·ªìn t·∫°i");
    }
    if (countSameJobId >= 2) {
      return ContentService.createTextOutput("‚ùå ƒê√£ c√≥ ƒë·ªß 2 d√≤ng jobId n√†y (true + false)");
    }
  }

  // Th√™m d√≤ng n·∫øu h·ª£p l·ªá
  sheet.appendRow([jobId, placeId, delay, boss.toString()]);
  return ContentService.createTextOutput("‚úÖ Added successfully");
}
