const WEBHOOK_URL = "https://discord.com/api/webhooks/1388698456595632239/X7a0oo3hUS3wRbHkM_ybPEMQ4bhv9mf5S_QVjwXZ6N74q0g_X8Z0LNs41zlynW_CYhr8";

function checkAndSendDelays() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const data = sheet.getDataRange().getValues();

  const now = Math.floor(Date.now() / 1000);
  let rowsToDelete = [];

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const jobId = row[0];
    const placeId = row[1];
    const delay = row[2];
    const boss = Boolean(row[3]);
    const becomeAround = row[4];
    const sentAt = row[5];

    if (!delay || delay > now) continue;

    if (sentAt && now - sentAt >= 900) {
      rowsToDelete.push(i + 1);
      continue;
    }

    if (!sentAt) {
      let bossName = "Unknown";
      if (placeId == 9224601490) bossName = "Macro";
      else if (placeId == 12413901502) bossName = "Kaido";
      else if (placeId == 16190471004 && boss) bossName = "Katakuri";
      else if (placeId == 16190471004) bossName = "Big Mom";

        const payload = {
        embeds: [
          {
            title: "üëë KimSoi Hub Boss Notify üëë",
            color: 0x00ff00,
            fields: [
              {
                name:  "üî• Boss:",
                value: "```" + bossName + "```",
                inline: true
              },
              {
                name:  "‚è∞ Become Around:",
                value: "```" + (becomeAround ? `${becomeAround} Minutes !` : "Unknown") + "```",
                inline: true
              },
              {
                name:  "üìú Job-Id:",
                value: jobId,
                inline: false
              },
              {
              name: "üìú Script:",
              value: `game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, "${jobId}", game.Players.LocalPlayer)`,
              inline: false
            },
            ]
          }
        ]
      };

      try {
        UrlFetchApp.fetch(WEBHOOK_URL, {
          method: "post",
          contentType: "application/json",
          payload: JSON.stringify(payload)
        });

        sheet.getRange(i + 1, 6).setValue(now); // Ghi c·ªôt F
      } catch (e) {
        Logger.log("Error sending webhook: " + e);
      }
    }
  }

  for (let i = rowsToDelete.length - 1; i >= 0; i--) {
    sheet.deleteRow(rowsToDelete[i]);
  }
}

function doGet(e) {
  const jobId = e.parameter.jobid;
  const placeId = parseInt(e.parameter.placeid);
  const delay = parseInt(e.parameter.delay);
  const boss = e.parameter.boss === 'true';
  const becomeAround = e.parameter.becomearound || ""; // M·ªõi th√™m

  if (!jobId || isNaN(placeId) || isNaN(delay)) {
    return ContentService.createTextOutput("Missing or invalid parameters");
  }

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const data = sheet.getDataRange().getValues();

  let countSameJobId = 0;
  let existsExact = false;

  for (let i = 1; i < data.length; i++) {
    const rowJobId = data[i][0];
    const rowPlaceId = parseInt(data[i][1]);
    const rowBoss = data[i][3] === true || data[i][3] === "true";

    if (placeId === 16190471004) {
      if (rowPlaceId === 16190471004 && rowJobId === jobId) {
        countSameJobId++;
        if (rowBoss === boss) {
          existsExact = true;
        }
      }
    } else {
      if (rowJobId === jobId) {
        return ContentService.createTextOutput("‚ùå jobId already exists (non-boss map)");
      }
    }
  }

  if (placeId === 16190471004) {
    if (existsExact) {
      return ContentService.createTextOutput("‚ùå jobId v·ªõi boss n√†y ƒë√£ t·ªìn t·∫°i");
    }
    if (countSameJobId >= 2) {
      return ContentService.createTextOutput("‚ùå ƒê√£ c√≥ ƒë·ªß 2 d√≤ng jobId n√†y (true + false)");
    }
  }

  // Ghi th√™m Become Around v√†o c·ªôt th·ª© 6
  sheet.appendRow([jobId, placeId, delay, boss.toString(), becomeAround, ""]);
  return ContentService.createTextOutput("‚úÖ Added successfully");
}
